const std = @import("std");
const testing = @import("testing.zig");

const right_side: u64 = 0b00000001_00000001_00000001_00000001_00000001_00000001_00000001_00000001;
const left_side: u64 = 0b10000000_10000000_10000000_10000000_10000000_10000000_10000000_10000000;
pub fn generate_king_moves(king_pos: u6) u64 {
    // The basic way a king moves ( 1 square in each direction )
    var pattern: u64 = 0b11100000_10100000_11100000_00000000_00000000_00000000_00000000_00000000;
    // The pattern is for kings in position 9, the first spot in which the king can move in any direction
    const patternStartPos = 9;

    // Shift the pattern to match the position of the king
    if (king_pos >= patternStartPos) {
        pattern = pattern >> (king_pos - patternStartPos);
    } else {
        pattern = pattern << (patternStartPos - king_pos);
    }

    // https://github.com/ziglang/zig/issues/6903
    const king_pos_shifted: u64 = @as(u64, 1) << (63 - king_pos);

    // Check if the king is on the left side of the board
    if (king_pos_shifted & left_side > 0) {
        // Make sure the king can't cross from the left side to the right
        pattern = pattern & ~right_side;
    }

    // Check if the king is on the right side of the board
    if (king_pos_shifted & right_side > 0) {
        // Make sure the king can't cross from the right side to the left
        pattern = pattern & ~left_side;
    }

    // We don't need to check for top or bottom since top is begining of bitboard and bottom is the end
    // Meaning we would just shift the bits outside the range of the number
    return pattern;
}

test generate_king_moves {
    std.testing.log_level = .debug;

    try testing.expectBitBoardArray(
        [64]u64{
            // A8
            0b01000000_11000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b10100000_11100000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b01010000_01110000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00101000_00111000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00010100_00011100_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00001010_00001110_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000101_00000111_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000010_00000011_00000000_00000000_00000000_00000000_00000000_00000000,
            0b11000000_01000000_11000000_00000000_00000000_00000000_00000000_00000000,
            0b11100000_10100000_11100000_00000000_00000000_00000000_00000000_00000000,
            0b01110000_01010000_01110000_00000000_00000000_00000000_00000000_00000000,
            0b00111000_00101000_00111000_00000000_00000000_00000000_00000000_00000000,
            0b00011100_00010100_00011100_00000000_00000000_00000000_00000000_00000000,
            0b00001110_00001010_00001110_00000000_00000000_00000000_00000000_00000000,
            0b00000111_00000101_00000111_00000000_00000000_00000000_00000000_00000000,
            0b00000011_00000010_00000011_00000000_00000000_00000000_00000000_00000000,
            0b00000000_11000000_01000000_11000000_00000000_00000000_00000000_00000000,
            0b00000000_11100000_10100000_11100000_00000000_00000000_00000000_00000000,
            0b00000000_01110000_01010000_01110000_00000000_00000000_00000000_00000000,
            0b00000000_00111000_00101000_00111000_00000000_00000000_00000000_00000000,
            0b00000000_00011100_00010100_00011100_00000000_00000000_00000000_00000000,
            0b00000000_00001110_00001010_00001110_00000000_00000000_00000000_00000000,
            0b00000000_00000111_00000101_00000111_00000000_00000000_00000000_00000000,
            0b00000000_00000011_00000010_00000011_00000000_00000000_00000000_00000000,
            0b00000000_00000000_11000000_01000000_11000000_00000000_00000000_00000000,
            0b00000000_00000000_11100000_10100000_11100000_00000000_00000000_00000000,
            0b00000000_00000000_01110000_01010000_01110000_00000000_00000000_00000000,
            0b00000000_00000000_00111000_00101000_00111000_00000000_00000000_00000000,
            0b00000000_00000000_00011100_00010100_00011100_00000000_00000000_00000000,
            0b00000000_00000000_00001110_00001010_00001110_00000000_00000000_00000000,
            0b00000000_00000000_00000111_00000101_00000111_00000000_00000000_00000000,
            0b00000000_00000000_00000011_00000010_00000011_00000000_00000000_00000000,
            0b00000000_00000000_00000000_11000000_01000000_11000000_00000000_00000000,
            0b00000000_00000000_00000000_11100000_10100000_11100000_00000000_00000000,
            0b00000000_00000000_00000000_01110000_01010000_01110000_00000000_00000000,
            0b00000000_00000000_00000000_00111000_00101000_00111000_00000000_00000000,
            0b00000000_00000000_00000000_00011100_00010100_00011100_00000000_00000000,
            0b00000000_00000000_00000000_00001110_00001010_00001110_00000000_00000000,
            0b00000000_00000000_00000000_00000111_00000101_00000111_00000000_00000000,
            0b00000000_00000000_00000000_00000011_00000010_00000011_00000000_00000000,
            0b00000000_00000000_00000000_00000000_11000000_01000000_11000000_00000000,
            0b00000000_00000000_00000000_00000000_11100000_10100000_11100000_00000000,
            0b00000000_00000000_00000000_00000000_01110000_01010000_01110000_00000000,
            0b00000000_00000000_00000000_00000000_00111000_00101000_00111000_00000000,
            0b00000000_00000000_00000000_00000000_00011100_00010100_00011100_00000000,
            0b00000000_00000000_00000000_00000000_00001110_00001010_00001110_00000000,
            0b00000000_00000000_00000000_00000000_00000111_00000101_00000111_00000000,
            0b00000000_00000000_00000000_00000000_00000011_00000010_00000011_00000000,
            0b00000000_00000000_00000000_00000000_00000000_11000000_01000000_11000000,
            0b00000000_00000000_00000000_00000000_00000000_11100000_10100000_11100000,
            0b00000000_00000000_00000000_00000000_00000000_01110000_01010000_01110000,
            0b00000000_00000000_00000000_00000000_00000000_00111000_00101000_00111000,
            0b00000000_00000000_00000000_00000000_00000000_00011100_00010100_00011100,
            0b00000000_00000000_00000000_00000000_00000000_00001110_00001010_00001110,
            0b00000000_00000000_00000000_00000000_00000000_00000111_00000101_00000111,
            0b00000000_00000000_00000000_00000000_00000000_00000011_00000010_00000011,
            0b00000000_00000000_00000000_00000000_00000000_00000000_11000000_01000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_11100000_10100000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_01110000_01010000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00111000_00101000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00011100_00010100,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00001110_00001010,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000111_00000101,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000011_00000010,
        },
        generate_king_moves,
    );
}
