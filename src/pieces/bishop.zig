const std = @import("std");
const testing = @import("testing.zig");

const diagonal_tl: u64 = 0b10000000_01000000_00100000_00010000_00001000_00000100_00000010_00000001;
const diagonal_tr: u64 = 0b00000001_00000010_00000100_00001000_00010000_00100000_01000000_10000000;

const max: u64 = std.math.pow(u64, 2, 63);
pub fn generate_bishop_moves(bishop_pos: u6) u64 {
    // We don't need to check against the bounds of the table here since
    // the piece will be able to move infintely in all four directions
    const col = bishop_pos & 7;
    const row = bishop_pos >> 3;

    var diagonal_1: u64 = diagonal_tl;

    if (col > row) {
        diagonal_1 <<= (col - row) * 8;
    }

    if (col < row) {
        diagonal_1 >>= (row - col) * 8;
    }

    var diagonal_2: u64 = diagonal_tr;
    // Diagonal tr starts form top right, so the x axis needs to be flipped
    // Otherwise this is exactly the same as for the other diagonal
    const rel_col = 7 - col;

    if (rel_col > row) {
        diagonal_2 <<= (rel_col - row) * 8;
    }

    if (rel_col < row) {
        diagonal_2 >>= (row - rel_col) * 8;
    }

    var combined = diagonal_1 | diagonal_2;

    // Subtract player pos
    combined &= ~std.math.shr(u64, max, bishop_pos);

    return combined;
}

test generate_bishop_moves {
    std.testing.log_level = .debug;

    try testing.expectBitBoardArray(
        [64]u64{
            0b00000000_01000000_00100000_00010000_00001000_00000100_00000010_00000001,
            0b00000000_10100000_00010000_00001000_00000100_00000010_00000001_00000000,
            0b00000000_01010000_10001000_00000100_00000010_00000001_00000000_00000000,
            0b00000000_00101000_01000100_10000010_00000001_00000000_00000000_00000000,
            0b00000000_00010100_00100010_01000001_10000000_00000000_00000000_00000000,
            0b00000000_00001010_00010001_00100000_01000000_10000000_00000000_00000000,
            0b00000000_00000101_00001000_00010000_00100000_01000000_10000000_00000000,
            0b00000000_00000010_00000100_00001000_00010000_00100000_01000000_10000000,
            0b01000000_00000000_01000000_00100000_00010000_00001000_00000100_00000010,
            0b10100000_00000000_10100000_00010000_00001000_00000100_00000010_00000001,
            0b01010000_00000000_01010000_10001000_00000100_00000010_00000001_00000000,
            0b00101000_00000000_00101000_01000100_10000010_00000001_00000000_00000000,
            0b00010100_00000000_00010100_00100010_01000001_10000000_00000000_00000000,
            0b00001010_00000000_00001010_00010001_00100000_01000000_10000000_00000000,
            0b00000101_00000000_00000101_00001000_00010000_00100000_01000000_10000000,
            0b00000010_00000000_00000010_00000100_00001000_00010000_00100000_01000000,
            0b00100000_01000000_00000000_01000000_00100000_00010000_00001000_00000100,
            0b00010000_10100000_00000000_10100000_00010000_00001000_00000100_00000010,
            0b10001000_01010000_00000000_01010000_10001000_00000100_00000010_00000001,
            0b01000100_00101000_00000000_00101000_01000100_10000010_00000001_00000000,
            0b00100010_00010100_00000000_00010100_00100010_01000001_10000000_00000000,
            0b00010001_00001010_00000000_00001010_00010001_00100000_01000000_10000000,
            0b00001000_00000101_00000000_00000101_00001000_00010000_00100000_01000000,
            0b00000100_00000010_00000000_00000010_00000100_00001000_00010000_00100000,
            0b00010000_00100000_01000000_00000000_01000000_00100000_00010000_00001000,
            0b00001000_00010000_10100000_00000000_10100000_00010000_00001000_00000100,
            0b00000100_10001000_01010000_00000000_01010000_10001000_00000100_00000010,
            0b10000010_01000100_00101000_00000000_00101000_01000100_10000010_00000001,
            0b01000001_00100010_00010100_00000000_00010100_00100010_01000001_10000000,
            0b00100000_00010001_00001010_00000000_00001010_00010001_00100000_01000000,
            0b00010000_00001000_00000101_00000000_00000101_00001000_00010000_00100000,
            0b00001000_00000100_00000010_00000000_00000010_00000100_00001000_00010000,
            0b00001000_00010000_00100000_01000000_00000000_01000000_00100000_00010000,
            0b00000100_00001000_00010000_10100000_00000000_10100000_00010000_00001000,
            0b00000010_00000100_10001000_01010000_00000000_01010000_10001000_00000100,
            0b00000001_10000010_01000100_00101000_00000000_00101000_01000100_10000010,
            0b10000000_01000001_00100010_00010100_00000000_00010100_00100010_01000001,
            0b01000000_00100000_00010001_00001010_00000000_00001010_00010001_00100000,
            0b00100000_00010000_00001000_00000101_00000000_00000101_00001000_00010000,
            0b00010000_00001000_00000100_00000010_00000000_00000010_00000100_00001000,
            0b00000100_00001000_00010000_00100000_01000000_00000000_01000000_00100000,
            0b00000010_00000100_00001000_00010000_10100000_00000000_10100000_00010000,
            0b00000001_00000010_00000100_10001000_01010000_00000000_01010000_10001000,
            0b00000000_00000001_10000010_01000100_00101000_00000000_00101000_01000100,
            0b00000000_10000000_01000001_00100010_00010100_00000000_00010100_00100010,
            0b10000000_01000000_00100000_00010001_00001010_00000000_00001010_00010001,
            0b01000000_00100000_00010000_00001000_00000101_00000000_00000101_00001000,
            0b00100000_00010000_00001000_00000100_00000010_00000000_00000010_00000100,
            0b00000010_00000100_00001000_00010000_00100000_01000000_00000000_01000000,
            0b00000001_00000010_00000100_00001000_00010000_10100000_00000000_10100000,
            0b00000000_00000001_00000010_00000100_10001000_01010000_00000000_01010000,
            0b00000000_00000000_00000001_10000010_01000100_00101000_00000000_00101000,
            0b00000000_00000000_10000000_01000001_00100010_00010100_00000000_00010100,
            0b00000000_10000000_01000000_00100000_00010001_00001010_00000000_00001010,
            0b10000000_01000000_00100000_00010000_00001000_00000101_00000000_00000101,
            0b01000000_00100000_00010000_00001000_00000100_00000010_00000000_00000010,
            0b00000001_00000010_00000100_00001000_00010000_00100000_01000000_00000000,
            0b00000000_00000001_00000010_00000100_00001000_00010000_10100000_00000000,
            0b00000000_00000000_00000001_00000010_00000100_10001000_01010000_00000000,
            0b00000000_00000000_00000000_00000001_10000010_01000100_00101000_00000000,
            0b00000000_00000000_00000000_10000000_01000001_00100010_00010100_00000000,
            0b00000000_00000000_10000000_01000000_00100000_00010001_00001010_00000000,
            0b00000000_10000000_01000000_00100000_00010000_00001000_00000101_00000000,
            0b10000000_01000000_00100000_00010000_00001000_00000100_00000010_00000000,
        },
        generate_bishop_moves,
    );
}
