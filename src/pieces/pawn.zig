const std = @import("std");
const lookup = @import("lookup.zig");
const testing = @import("testing.zig");

// Which represents the top-left position, A8
const max: u64 = std.math.pow(u64, 2, 63);

pub fn generate_black_pawn_moves(pawn_pos: u6) u64 {
    // This is really dumb
    // Pawns can move to the space in front ie A3 -> A2 for black pawns
    // The board is set up so that
    // A1 = b1000 0000 0000 0000... = 2^63
    // A2 = b0000 0000 1000 0000... = 2^55 = A1 >> 8
    // In other words; bit shifting right by 8 gives you the space in front
    //
    // pawn_pos is the number of the square starting at A8
    // A8 = 0
    // B8 = 1
    // ..
    // A7 = 8
    // A6 = 16
    // ...
    // So to get the bit mask of pawn_pos, we can do 2^63 >> pawn_pos
    // And thus we can do 2^63 >> pawn_pos + 8 to get the space bhind pawn_pos
    //
    // We use 2^63 instead of 1 here becasue we need the ability to move to spaces
    // Which we can do by bit shifting (max | (max << 8)) which gives us A8 and A7
    // We can then bit shift that number in the same way as we did with just max
    const row: u8 = lookup.index_to_row(pawn_pos);

    if (row == 7) {
        return 0;
    }

    if (row == 1) {
        return std.math.shr(
            u64,
            // doing max | max >> 8 also gives us the space to rows ahead of max
            // A7 and A6 togher
            max | max >> 8,
            // Move both spaces pawn_pos + 8 spaces back
            (pawn_pos + 8),
        );
    }

    return std.math.shr(
        u64,
        // A8
        max,
        // Move pawn_pos + 8 spaces back from H8
        (pawn_pos + 8),
    );
}

pub fn generate_white_pawn_moves(pawn_pos: u6) u64 {
    const row: u8 = lookup.index_to_row(pawn_pos);
    // Works the same as for black pawns
    // Except we do pawn_pos - 8 instead of + 8
    // Because we need the square ahead of pawn_pos

    if (row == 0) {
        return 0;
    }

    if (row == 6) {
        return std.math.shr(
            u64,
            max | max >> 8,
            (pawn_pos - 16),
        );
    }

    return std.math.shr(
        u64,
        max,
        pawn_pos - 8,
    );
}

test generate_white_pawn_moves {
    std.testing.log_level = .debug;

    try testing.expectBitBoardArray(
        [64]u64{
            // A8
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
            // A7
            0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b01000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00100000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00010000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00001000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000100_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000010_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000001_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
            // A6
            0b00000000_10000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_01000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00100000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00010000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00001000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000100_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000010_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000001_00000000_00000000_00000000_00000000_00000000_00000000,
            // A5
            0b00000000_00000000_10000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_01000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00100000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00010000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00001000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000100_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000010_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000001_00000000_00000000_00000000_00000000_00000000,
            // A4
            0b00000000_00000000_00000000_10000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_01000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00100000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00010000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00001000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000100_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000010_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000001_00000000_00000000_00000000_00000000,
            // A3
            0b00000000_00000000_00000000_00000000_10000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_01000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00100000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00010000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00001000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000100_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000010_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000001_00000000_00000000_00000000,
            // A2
            0b00000000_00000000_00000000_00000000_10000000_10000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_01000000_01000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00100000_00100000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00010000_00010000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00001000_00001000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000100_00000100_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000010_00000010_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000001_00000001_00000000_00000000,
            // A1
            0b00000000_00000000_00000000_00000000_00000000_00000000_10000000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_01000000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00100000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00010000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00001000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000100_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000010_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000001_00000000,
        },
        generate_white_pawn_moves,
    );
}

test generate_black_pawn_moves {
    std.testing.log_level = .debug;

    try testing.expectBitBoardArray(
        [64]u64{
            // A8
            0b00000000_10000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_01000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00100000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00010000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00001000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000100_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000010_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000001_00000000_00000000_00000000_00000000_00000000_00000000,
            // A7
            0b00000000_00000000_10000000_10000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_01000000_01000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00100000_00100000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00010000_00010000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00001000_00001000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000100_00000100_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000010_00000010_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000001_00000001_00000000_00000000_00000000_00000000,
            // A6
            0b00000000_00000000_00000000_10000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_01000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00100000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00010000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00001000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000100_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000010_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000001_00000000_00000000_00000000_00000000,
            // A5
            0b00000000_00000000_00000000_00000000_10000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_01000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00100000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00010000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00001000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000100_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000010_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000001_00000000_00000000_00000000,
            // A4
            0b00000000_00000000_00000000_00000000_00000000_10000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_01000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00100000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00010000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00001000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000100_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000010_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000001_00000000_00000000,
            // A3
            0b00000000_00000000_00000000_00000000_00000000_00000000_10000000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_01000000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00100000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00010000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00001000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000100_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000010_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000001_00000000,
            // A2
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_10000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_01000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00100000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00010000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00001000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000100,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000010,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001,
            // A1
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
            0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
        },
        generate_black_pawn_moves,
    );
}
