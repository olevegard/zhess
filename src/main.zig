const std = @import("std");
pub const debug = @import("debug.zig");
pub const moves = @import("moves.zig");
pub const lookup = @import("lookup.zig");

pub fn main() !void {
    // const board: [12]u64 = comptime create_board();
    // kdebug.print_board(board);
    var king_moves: [64]u64 = undefined;
    var knight_moves: [64]u64 = undefined;
    var white_pawn_moves: [64]u64 = undefined;
    var black_pawn_moves: [64]u64 = undefined;
    var bishop_moves: [64]u64 = undefined;
    var rook_moves: [64]u64 = undefined;
    var queen_moves: [64]u64 = undefined;

    // Use u6 as a loop counter, since the move generators usually take u6
    inline for (0..64) |i| {
        king_moves[i] = comptime moves.generateKingMoveBitboard(i);
        knight_moves[i] = moves.generateKnightMoves(i);
        white_pawn_moves[i] = moves.generate_white_pawn_moves(i);
        black_pawn_moves[i] = moves.generate_black_pawn_moves(i);
        bishop_moves[i] = moves.generate_bishop_moves_12(i);
        rook_moves[i] = moves.generate_rook_moves(i);
        queen_moves[i] = moves.generate_queen_moves(i);
        // if (i == 8 or i == 17 or i == 28 or i == 36 or i == 47 or i == 55) {
        if (i < 20) {
            std.debug.print("\n\n====================== {d} - {s} ======================\n", .{ i, lookup.index_to_pos(i) });
            debug.print_possible_moves(knight_moves[i], i);
        }

        if (i == 63) break;
    }
}

//     63 -- 56 55 -- 48 47    40 39 -- 32 31 -- 24 23 -- 16 15 --- 8 7 ---- 0
//
//35:  00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000,
//33:  00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000,
//28:  00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000,
//24:  00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000,
//18:  00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000,
//12:  00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000,
//08:  00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000,
//03:  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000,
//01:  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001,
//
//
//     39 -- 32 31 -- 24 23 -- 16 15 --- 8 7 ---- 0
//18:  00001010 00010001 00000100 00010001 00001010,

//
// 4321 0987 6543
// 0000 0000 0000 0000 0000 0000 0000 0000
// n =            18
// x = 1, 3, 8, 12, 24, 28, 33, 35
// +/- 6
// +/- 10
// +/- 15
// +/- 17
//
//   32 16 08 04 02 01
//1   0  0  0  0  0  1
//3   0  0  0  0  1  1
//8   0  0  1  0  0  0
//12  0  0  1  1  0  0
//nn  0  1  0  0  1  0
//24  0  1  1  0  0  0
//28  0  1  1  1  0  0
//33  1  0  0  0  0  1
//35  1  0  0  0  1  1
//
// |---|---|---|---|---|
// | 0 | x | 2 | x | 4 |
// |---|---|---|---|---|
// | x | 9 |10 |11 | x |
// |---|---|---|---|---|
// |16 |17 | n |19 |20 |
// |---|---|---|---|---|
// | x |25 |26 |27 | x |
// |---|---|---|---|---|
// |32 | x |34 | x |36 |
// |---|---|---|---|---|
//
//
// |---|---|---|
// | n | 1 | 2 |
// |---|---|---|
// | 8 | 9 | x |
// |---|---|---|
// |16 | x |18 |
// |---|---|---|

// |---|---|---|---|---|
// | - | - | n | 1 | 2 |
// |---|---|---|---|---|
// | x | 9 |10 |11 | x |
// |---|---|---|---|---|
// | x |17 |18 | x |20 |
// |---|---|---|---|---|

//     39 -- 32 31 -- 24 23 -- 16 15 --- 8 7 ---- 0
//0 :  00000000 00000000 000000x0 00000x00 0000000n = 27
//_ :  0000x0 00000x00 0000000n
//18:  0000x0x0 000x000x 00000n00 000x000x 0000x0x0 = 144
// 0 -> 1024

// |---|---|---|
// | 0 | 1 | 2 |
// |---|---|---|
// | 8 | k |10 |
// |---|---|---|
// |16 |17 |18 |
// |---|---|---|

//            4    8    12   16   20   24   28   32   36   40   44   48   52   56   60
//       1010 0000 1110 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
const pos0: u64 = 0b0100_0000_1100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
const pos1: u64 = 0b1010_0000_0111_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
const pos2: u64 = 0b0101_0000_0011_1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
const pos3: u64 = 0b0010_1000_0001_1100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
const pos4: u64 = 0b0001_0100_0000_1110_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
const pos5: u64 = 0b0000_1010_0000_0111_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
const pos6: u64 = 0b0000_0101_0000_0011_1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
const pos7: u64 = 0b0000_0010_0000_0001_1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
const pos8: u64 = 0b0000_0000_0100_0000_1100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
//
// |---|---|---|---|---|---|---|---|---|
// | 0 | k | x | - | - | - | - | x | k |
// |---|---|---|---|---|---|---|---|---|
// | 8 | x | x | - | - | - | - | x | x |
// |---|---|---|---|---|---|---|---|---|
// |16 | - | - | x | x | x | - | - | - |
// |---|---|---|---|---|---|---|---|---|
// |24 | - | - | x | k | x | - | x | x |
// |---|---|---|---|---|---|---|---|---|
// |32 | - | - | x | x | x | - | x | k |
// |---|---|---|---|---|---|---|---|---|
// |40 | - | - | - | - | - | - | x | x |
// |---|---|---|---|---|---|---|---|---|
// |48 | - | x | x | x | - | - | - | - |
// |---|---|---|---|---|---|---|---|---|
// |56 | - | x | k | x | - | - | - | - |
// |---|---|---|---|---|---|---|---|---|

// k000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
// 0100 0000 1100 0000 0000 0000
//
// 0k00 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
// 1010 0000 1100 0000 0000 0000

//      4    8    12   16   20   24   28   32   36   40   44   48
// 0000 000k 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
// 0000 0010 0000 0011 0000 0000 0000 0000 0000 0000 0000 0000

//      4    8    12   16   20   24   28   32   36   40   44   48
// 0000 0000 0000 0000 0000 0000 000k 0000 0000 0000 0000 0000
// 0000 0000 0000 0000 0011 1000 0010 1000 0011 1000 0000 0000
//
// 0k00 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
// 1010 0000 1100 0000 0000 0000
//
// 0000 0000 0000 0000 0000 0000 000k 0000 0000 0000 0000 0000
// 0000 0000 0000 0000 0011 1000 0010 1000 0011 1000 0000 0000
//
//      4    8    12   16   20   24   28   32   36   40   44   48
// 0000 0000 0000 0000 0000 0000 0000 0000 0000 000k 0000 0000 0000
// 0000 0000 0000 0000 0000 0000 0000 0011 0000 0010 0000 0011 0000
//
//
// 0000 0000 0k00 0000 0000 0000
// 1110 0000 1010 0000 1110 0000
//
// 00k0 0000 0000 0000 0000 0000
// 0100 0000 0100 0001 1100 0000
//
// 0010 0000 0k00 0000 0000 0000
// 0010 0000 0k00 0000 0000 0000
// 1110 0000 1010 0000 1110 0000
//            010 0000 1110 0000

fn create_board() [12]u64 {
    return [12]u64{
        // Pawns
        //
        0b11111111_10000001_10000001_10000001_10000001_10000001_10000001_11111111,
        // 0b00000000_00000000_00000000_00000000_00000000_00000000_11111111_00000000,
        0b00000000_11111111_00000000_00000000_00000000_00000000_00000000_00000000,

        // Rooks
        0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_10000001,
        0b10000001_00000000_00000000_00000000_00000000_00000000_00000000_00000000,

        // Knights
        0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_01000010,
        0b01000010_00000000_00000000_00000000_00000000_00000000_00000000_00000000,

        // Bishops
        0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00100100,
        0b00100100_00000000_00000000_00000000_00000000_00000000_00000000_00000000,

        // Queens
        0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00010000,
        0b00010000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,

        // Kings
        0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00001000,
        0b00001000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
    };
}
